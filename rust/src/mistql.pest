query = { SOI ~ expression ~ EOI }

expression = {
    value |
    monad |
    fncall
}

monad = { monadic_op ~ expression }

monadic_op = { "!" }

// functions aren't always surrounded by parens but
// I'll deal with that later
fncall = { "(" ~ ident ~ expression* ~ ")" }

value = { at | literal }
at = { "@" }

literal = { object | array | string | number | boolean | null }

array = {
    "[" ~ "]" |
    "[" ~ expression ~ ("," ~ expression)* ~ "]"
}

object = {
    "{" ~ "}" |
    "{" ~ keyval ~ ("," ~ keyval)* ~ "}"
}
keyval = { key ~ ":" ~ expression }
key = { string | ident }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

boolean = { "true" | "false" }

null = { "null" }

WHITESPACE = _{ " " }